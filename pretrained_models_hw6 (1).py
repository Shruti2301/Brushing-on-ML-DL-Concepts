# -*- coding: utf-8 -*-
"""Pretrained Models HW6

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15FNh1D_oUyRD5NMKalKt0B6FwUyEb-0u
"""

#pip install datasets

import os
import torch
import numpy as np
from transformers import AutoTokenizer, AutoModelForSequenceClassification, DataCollatorWithPadding
from datasets import load_dataset, DatasetDict
from transformers.keras_callbacks import KerasMetricCallback

def batch_predict_sentiment(texts, tokenizer, model, batch_size=10):
    total_texts = len(texts)
    predicted_sentiments = []

    for i in range(0, total_texts, batch_size):
        texts_batch = texts[i:i + batch_size]
        inputs = tokenizer(texts_batch, return_tensors="pt", padding=True, truncation=True)

        print(f"Predicting batch {i // batch_size + 1}/{(total_texts + batch_size - 1) // batch_size}")

        with torch.no_grad():
            outputs = model(**inputs)

        predicted_classes = torch.argmax(outputs.logits, dim=1).tolist()
        predicted_sentiments.extend(predicted_classes)

    return predicted_sentiments

def calculate_accuracy(predicted_sentiments, actual_labels):
    correct_predictions = sum(1 for pred, label in zip(predicted_sentiments, actual_labels) if pred == label)
    total_predictions = len(actual_labels)
    accuracy = correct_predictions / total_predictions * 100
    return accuracy

def predict_model(test_data, model_name):
    tokenizer = AutoTokenizer.from_pretrained(model_name)
    model = AutoModelForSequenceClassification.from_pretrained(model_name)

    batch_predicted_sentiments = batch_predict_sentiment(test_data['text'], tokenizer, model)
    actual_labels = test_data['label']

    accuracy = calculate_accuracy(batch_predicted_sentiments, actual_labels)
    print(f"The accuracy achieved for predictions using {model_name} is {accuracy:.2f}%")
    return accuracy

def main():
    imdb = load_dataset("imdb")
    small_test_dataset = imdb["test"].shuffle(seed=42).select(range(200))

    # Predict using GPT2
    gpt2_accuracy = predict_model(small_test_dataset, "mnoukhov/gpt2-imdb-sentiment-classifier")

    # Predict using RoBERTa
    roberta_accuracy = predict_model(small_test_dataset, "abhishek/autonlp-imdb-roberta-base-3662644")

    # Predict using BERT
    bert_accuracy = predict_model(small_test_dataset, "bert-base-uncased")

    # Comparing accuracies
    print("\nComparing accuracies:")
    print(f"GPT2 Accuracy: {gpt2_accuracy:.2f}%")
    print(f"RoBERTa Accuracy: {roberta_accuracy:.2f}%")
    print(f"BERT Accuracy: {bert_accuracy:.2f}%")

if __name__ == '__main__':
    main()

